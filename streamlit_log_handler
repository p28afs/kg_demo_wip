import logging
import streamlit as st
from file1 import some_method_in_file1

st.title("Live Logs from Multiple Files")

# Create a placeholder for logs in Streamlit
log_placeholder = st.empty()

# ‚úÖ Define a Streamlit handler (for UI logs)
class StreamlitLogHandler(logging.Handler):
    log_messages = []  # Store log history

    def emit(self, record):
        log_message = self.format(record)
        self.log_messages.append(log_message)
        log_placeholder.text_area("Logs", "\n".join(self.log_messages), height=300)

# ‚úÖ Set up a file logger for **detailed logging**
file_logger = logging.getLogger("detailed_logger")
file_logger.setLevel(logging.DEBUG)  # Capture all logs

file_handler = logging.FileHandler("app.log")  # Log file
file_formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
file_handler.setFormatter(file_formatter)
file_logger.addHandler(file_handler)

# ‚úÖ Set up a UI logger for **selected logs**
ui_logger = logging.getLogger("ui_logger")
ui_logger.setLevel(logging.INFO)  # Only important logs

ui_handler = StreamlitLogHandler()
ui_formatter = logging.Formatter("%(levelname)s - %(message)s")
ui_handler.setFormatter(ui_formatter)
ui_logger.addHandler(ui_handler)

# ‚úÖ Test logging
file_logger.debug("üîç Debug log - Only in file")  # Only in log file
file_logger.info("‚ÑπÔ∏è Info log - In file")  # Only in log file
ui_logger.info("‚úÖ UI log - Visible in Streamlit UI")  # Shown in UI

# Call file1 function
ui_logger.info("üöÄ Starting process...")
some_method_in_file1()
ui_logger.info("‚úÖ Process completed successfully!")
